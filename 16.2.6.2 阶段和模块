16.2.6.2 阶段和模块

阶段等级（phase level）是一个模块相关概念。当通过require从另一个模块导入时，Racket允许我们将导入的绑定转移到与原来的绑定不同的阶段等级：

(require "a.rkt")                ; 不带阶段转移的导入
(require (for-syntax "a.rkt"))   ; 通过+1转移阶段
(require (for-template "a.rkt")) ; 通过-1转移阶段
(require (for-meta 5 "a.rkt"))   ; 通过+5转移阶段

也就是说，在require中使用for-syntax意味着该模块的所有绑定都会增加它们的阶段等级。在第0阶段等级定义并用for-syntax导入的绑定成为一个阶段等级1的绑定：

> (module c racket
    (define x 0) ; defined at phase level 0
    (provide x))
> (module d racket
    (require (for-syntax 'c))
    ; has a binding at phase level 1, not 0:
    #'x)

让我们看看如果我们试图在阶段等级0创建一个给#'button绑定的语法对象发生了什么：

> (define button 0)
> (define see-button #'button)

现在button和see-button在第0阶段等级中定义。对#'button的词汇上下文会知道在阶段等级0有一个为button的绑定。事实上，好像如果我们试图对see-button进行eval，一切都很好地运行：

> (eval see-button)
0

现在，让我们在一个宏中使用see-button：

> (define-syntax (m stx)
    see-button)
> (m)
see-button: undefined;

 cannot reference undefined identifier

显然，see-button没有在阶段1级被定义，所以我们不能在宏本体内引用它。让我们在另一个模块中使用see-button，通过将button定义放到一个模块中并在第1阶段等级导入它。那么，我们在第1阶段等级得到了see-button：

> (module a racket
    (define button 0)
    (define see-button #'button)
    (provide see-button))
> (module b racket
    (require (for-syntax 'a)) ; gets see-button at phase level 1
    (define-syntax (m stx)
      see-button)
    (m))
eval:1:0: button: unbound identifier;

 also, no #%top syntax transformer is bound

  in: button

Racket说button现在不受约束！当a在阶段等级1被导入，我们有了以下的绑定：

button     at phase level 1
see-button at phase level 1

所以宏m能够看到一个在阶段等级1为see-button的绑定并且将返回#'button语法对象，它指的是在阶段等级1的button绑定。但是m的使用是在第0阶段等级，在b的第0阶段等级没有按钮。这就是为什么see-button需要约束在第1阶段等级，就像在原来的a中。那么，在原来的b中，我们有以下绑定：

button     at phase level 0
see-button at phase level 1

在这个场景中，我们可以在宏中使用see-button，因为在阶段等级1上see-button是绑定的。当宏展开时，它将指向一个在第0阶段等级的button绑定。

用(define see-button #'button)定义see-button本身没有错；它取决于我们打算如何使用see-button。例如，我们可以安排m明智地使用see-button，因为它使用begin-for-syntax将它放在了阶段等级1的上下文中：

> (module a racket
    (define button 0)
    (define see-button #'button)
    (provide see-button))
> (module b racket
    (require (for-syntax 'a))
    (define-syntax (m stx)
      (with-syntax ([x see-button])
        #'(begin-for-syntax
            (displayln x))))
    (m))
0

在这种情况下，模块b在阶段等级1上机有button绑定也有see-button绑定。宏的扩展是

(begin-for-syntax
  (displayln button))

它的工作原理是，因为button在阶段等级1上绑定。

现在，你可以通过在阶段等级0和阶段等级1中导入a来欺骗阶段系统。然后，你将具有以下绑定

button     at phase level 0
see-button at phase level 0
button     at phase level 1
see-button at phase level 1

你可能现在希望宏中的see-button可以工作，但它没有：

> (module a racket
    (define button 0)
    (define see-button #'button)
    (provide see-button))
> (module b racket
    (require 'a
             (for-syntax 'a))
    (define-syntax (m stx)
      see-button)
    (m))
eval:1:0: button: unbound identifier;

 also, no #%top syntax transformer is bound

  in: button

宏m中的see-button来自于(for-syntax 'a)的导入。为了让宏m运行，它需要在第0阶段有button绑定。那个绑定存在——它通过(require 'a)表明。然而，(require 'a)和(require (for-syntax 'a))是相同模块的不同实例（different instantiation）。第1阶段的see-button按钮仅指第1阶段的button，而不是来自一个不同实例的第0阶段绑定的button，即使来自同一个源模块。

这种阶段等级之间的不匹配的实例可以用syntax-shift-phase-level修复。像#'button捕捉词汇信息那样在所有（all）阶段等级重调用语法对象。这里的问题是see-button在第1阶段调用，但需要返回一个可以在第0阶段进行求值的语法对象。默认情况下，see-button在同一阶段绑定到#'button。但通过syntax-shift-phase-level，我们可以使see-button在不同的相对阶段等级适用于#'button。在这种情况下，我们使用一个-1的阶段转移使在阶段1的see-button适用于在0阶段的#'button。（由于阶段转变发生在每一个等级，它也使0阶段的see-button适用于-1阶段的#'button）

注意，syntax-shift-phase-level只创建跨阶段的引用。为了使该引用运行，我们仍然需要在两个阶段实例化我们的模块，以便引用和它的目标具有可用的绑定。因此，在模块'b，我们仍然在阶段0和阶段1导入模块'a——使用(require 'a (for-syntax 'a))——因此我们为see-button的阶段1绑定和为button的一个阶段0绑定。现在宏m就会运行了。

> (module a racket
    (define button 0)
    (define see-button (syntax-shift-phase-level #'button -1))
    (provide see-button))
> (module b racket
    (require 'a (for-syntax 'a))
    (define-syntax (m stx)
      see-button)
    (m))
> (require 'b)
0

顺便问一下，在第0阶段绑定的see-button会发生什么？其#'button绑定也已经转移，但是对阶段-1。由于button本身在-1阶段不受约束，如果我们试图在第0阶段对see-button求值，我们会得到一个错误。换句话说，我们并没有永久地解决我们的不匹配问题——我们只是把它转移到一个不太麻烦的位置。

> (module a racket
    (define button 0)
    (define see-button (syntax-shift-phase-level #'button -1))
    (provide see-button))
> (module b racket
    (require 'a (for-syntax 'a))
    (define-syntax (m stx)
      see-button)
    (m))
> (module b2 racket
    (require 'a)
    (eval see-button))
> (require 'b2)
button: undefined;

 cannot reference undefined identifier

当宏试图匹配字面绑定时——使用syntax-case或syntax-parse，也可能出现上述不匹配的错误。

> (module x racket
    (require (for-syntax syntax/parse)
             (for-template racket/base))
  
    (provide (all-defined-out))
  
    (define button 0)
    (define (make) #'button)
    (define-syntax (process stx)
      (define-literal-set locals (button))
      (syntax-parse stx
        [(_ (n (~literal button))) #'#''ok])))
> (module y racket
    (require (for-meta 1 'x)
             (for-meta 2 'x racket/base))
  
    (begin-for-syntax
      (define-syntax (m stx)
        (with-syntax ([out (make)])
          #'(process (0 out)))))
  
    (define-syntax (p stx)
      (m))
  
    (p))
eval:2.0: process: expected the identifier `button'

  at: button

  in: (process (0 button))

在这个例子中，在阶段等级2里make正在y中被使用，它返回的#'button语法对象——指的是button在阶段0的X里的绑定和在阶段等级2的来自(for-meta 2 'x)的y里的绑定。process宏在阶段等级1从(for-meta 1 'x)导入，并且它知道button应该在阶段等级1上绑定。当syntax-parse在process内执行时，它正在寻找在阶段等级1上绑定的button，但它仅看到一个阶段等级2绑定并且不匹配。

为了修正这个例子，我们可以相对于x在阶段等级1提供make，然后在y中的第1阶段等级导入它：

> (module x racket
    (require (for-syntax syntax/parse)
             (for-template racket/base))
  
    (provide (all-defined-out))
  
    (define button 0)
  
    (provide (for-syntax make))
    (define-for-syntax (make) #'button)
    (define-syntax (process stx)
      (define-literal-set locals (button))
      (syntax-parse stx
        [(_ (n (~literal button))) #'#''ok])))
> (module y racket
    (require (for-meta 1 'x)
             (for-meta 2 racket/base))
  
    (begin-for-syntax
      (define-syntax (m stx)
        (with-syntax ([out (make)])
          #'(process (0 out)))))
  
    (define-syntax (p stx)
      (m))
  
    (p))
> (require 'y)
'ok
