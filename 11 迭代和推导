11 迭代和推导

用于语法形式的for家族支持对序列进行迭代。 列表，向量，字符串，字节字符串，输入端口和散列表都可以用作序列，像in-range的构造函数可以提供更多类型的序列。

for的变种累积迭代结果以不同的方式，但它们都具有相同的语法形状。 现在简化了，for的语法是

(for ([id sequence-expr] ...)
  body ...+)

for循环遍历由sequence-expr生成的序列。 对于序列的每个元素，将元素绑定到id，然后输出bodys的效果。

示列：
> (for ([i '(1 2 3)])
    (display i))

123
> (for ([i "abc"])
    (printf "~a..." i))

a...b...c...
> (for ([i 4])
    (display i))

0123

for的for / list变体更像Racket。 它将body结果累积到一个列表中，而不是输出body仅仅一种效果。 在更多的技术术语中，for / list实现了列表内容的理解。

示列：
> (for/list ([i '(1 2 3)])
    (* i i))

'(1 4 9)
> (for/list ([i "abc"])
    i)

'(#\a #\b #\c)
> (for/list ([i 4])
    i)

'(0 1 2 3)

for的完整语法可容纳多个序列并行迭代，for*变体可以嵌套迭代，而不是并行运行。 for和for *积累body的更多变体以不同的方式产生。 在所有这些变体中，包含迭代的谓词都可以包含在绑定中。

不过，在详细讨论变量的变化之前，最好先看看生成有趣示例的序列生成器的种类。
