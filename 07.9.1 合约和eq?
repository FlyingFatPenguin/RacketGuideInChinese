7.9.1 合约和eq?

一般来说，在程序中添加一个合约既应该使程序的行为保持不变，也应该表明违反合约的行为。这几乎是真正的Racket合约，只有一个例外：eq?。

eq?程序的设计是快速的，并且没有提供太多的确保方式，除非它返回true，这意味着这两个值在所有方面都是相同的。在内部，这是作为一个低级的指针相等实现的，因此它公开了如何实现Racket的信息（以及如何实现合约）。

用eq?合约交互是糟糕的，因为函数合约检查是在内部作为包装函数实现的。例如，考虑这个模块：

#lang racket
 
(define (make-adder x)
  (if (= 1 x)
      add1
      (lambda (y) (+ x y))))
(provide (contract-out
          [make-adder (-> number? (-> number? number?))]))

它的导出make-adder函数，它是通常咖喱附加函数，除了当它的输入是1时，它返回Racket的add1。

你可能希望这样：

(eq? (make-adder 1)
     (make-adder 1))

应该返回#t，但却没有。如果合约被改成了any/c（或者甚至是(-> number? any/c)），那么eq?调用将返回#t。

教训：不要对有合约的值使用eq?。
