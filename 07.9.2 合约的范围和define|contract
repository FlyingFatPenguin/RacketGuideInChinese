7.9.2 合约的范围和define/contract

合约的范围是被define/contract所确定，它创建了一个嵌套的合约范围，有时不直观。当具有合约的多个函数或其它值相互作用时，情况尤其如此。例如，考虑这两个相互作用的函数：

> (define/contract (f x)
    (-> integer? integer?)
    x)
> (define/contract (g)
    (-> string?)
    (f "not an integer"))
> (g)

f: contract violation

  expected: integer?

  given: "not an integer"

  in: the 1st argument of

      (-> integer? integer?)

  contract from: (function f)

  blaming: top-level

   (assuming the contract is correct)

  at: eval:2.0

人们可能会认为，g可能被归咎于破坏与f的合约条件。然而，它们不是。相反，f和g之间的访问是通过封闭模块的顶层进行的。

更确切地说，f和模块的顶层有(-> integer? integer?)合约协调它们的相互作用，g和顶层有(-> string?)协调它们之间的相互作用，但是f和g之间没有直接的合约，这意味着g主体中的f的引用实际上是模块的顶层的职责，而不是g的。换句话说，函数f被赋予g，g与顶层之间没有约定，因此顶层应被归咎。

如果我们想增加g和顶层之间的合约，我们可以使用define/contract的#:freevar申明并看到预期的归咎：

> (define/contract (f x)
    (-> integer? integer?)
    x)
> (define/contract (g)
    (-> string?)
    #:freevar f (-> integer? integer?)
    (f "not an integer"))
> (g)

f: contract violation

  expected: integer?

  given: "not an integer"

  in: the 1st argument of

      (-> integer? integer?)

  contract from: top-level

  blaming: (function g)

   (assuming the contract is correct)

  at: eval:6.0

教训：如果两个值与合约应相互作用，把它们放在与模块范围内的合约不同的模块中或使用#:freevar。
