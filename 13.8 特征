13.8 特征

一个特征类似于一个mixin，它封装了一组方法添加到一个类里。一个特征不同于一个mixin，它自己的方法是可以用特征运算符操控的，比如trait-sum（合并这两个特征的方法）、trait-exclude（从一个特征中移除方法）以及trait-alias（添加一个带有新名字的方法的拷贝；它不重定向到对任何旧名字的调用）。

混合和特征之间的实际差别是两个特征可以组合，即使它们包括了共有的方法，而且即使两者的方法都可以合理地覆盖其它方法。在这种情况下，程序员必须明确地解决冲突，通常通过混淆方法，排除方法，以及合并使用别名的新特性。

假设我们的fish%程序员想要定义两个类扩展，spots和stripes，每个都包含get-color方法。鱼（fish）的斑点色（spot）不应该覆盖的条纹色（stripe），反之亦然；相反，一个spots+stripes-fish%应结合两种颜色，这是不可能的如果spots和stripes是普通混合实现。然而，如果spots和stripes作为特征来实现，它们可以组合在一起。首先，我们在每个特征中给get-color起一个别名为一个不冲突的名称。第二，get-color方法从两者中移除，只有别名的特征被合并。最后，新特征用于创建一个类，它基于这两个别名引入自己的get-color方法，生成所需的spots+stripes扩展。
