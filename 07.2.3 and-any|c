7.2.3 and和any/c

用于deposit的any合约符合任何结果，只能在函数合约的范围内使用。代替上面的any，我们可以使用更具体的合约 void?，它表示函数总是返回(void)值。然而，void?合约要求合约监控系统每次调用函数时都要检查返回值，即使“客户机”模块不能很好地处理这个值。相反，any告诉监控系统不检查返回值，它告诉潜在客户机，“服务器”模块对函数的返回值不作任何承诺，甚至不管它是单个值或多个值。

any/c合约和any类似，因为它对值没有任何要求。与any不同的是，any/c表示一个单个值，它适合用作参数合约。使用any/c作为范围合约，强迫对函数产生的一个单个值进行检查。就像这样，

(-> integer? any)

描述一个函数，该函数接受一个整数并返回任意数量的值，然而

(-> integer? any/c)

描述接受整数并生成单个结果的函数（但对结果没有更多说明）。以下函数

(define (f x) (values (+ x 1) (- x 1)))

匹配(-> integer? any)，但不匹配(-> integer? any/c)。

当从一个函数获得一个单个结果的承诺特别重要时，使用any/c作为结果的合约。当希望尽可能少地承诺（并尽可能少地检查）函数的结果时，使用any合约。
