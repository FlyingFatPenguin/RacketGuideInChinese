15.1.3 命名空间和模块

为let绑定，词法范围意味着eval不能自动看到一个调用它的module（模块）的定义。然而，和let绑定不同的是，Racket提供了一种将模块反射到一个namespace（命名空间）的方法。

 module->namespace函数接受一个引用的模块路径（module path），并生成一个命名空间，用于对表达式和定义求值，就像它们出现在module主体中一样：
 
> (module m racket/base
    (define x 11))
> (require 'm)
> (define ns (module->namespace ''m))
> (eval 'x ns)
11

module->namespace函数对来自于模块之外的模块是最有用的，在这里模块的全名是已知的。然而，在module表内，模块的全名可能不知道，因为它可能取决于在最终加载时模块源位于何处。

在module内，使用define-namespace-anchor声明模块上的反射钩子，并使用namespace-anchor->namespace在模块的命名空间中滚动：

#lang racket
 
(define-namespace-anchor a)
(define ns (namespace-anchor->namespace a))
 
(define x 1)
(define y 2)
 
(eval '(cons x y) ns) ; produces (1 . 2)
