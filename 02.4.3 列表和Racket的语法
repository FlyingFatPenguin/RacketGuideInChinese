2.4.3 列表和Racket的语法

现在你已经知道了关于配对和列表的真相，而且现在你已经明白了quote，你已经准备好理解我们一直在简化Racket真实语法的主要方法。

Racket的语法并不是直接用字符流来定义的。相反，语法是由两层确定的：

1、读取器层，将字符序列转换成列表、符号和其他常量；
2、一个扩展层，它处理列表、符号和其他常量，将它们解析为表达式。

打印和阅读的规则是一致的。例如，一个列表用圆括号打印，读一对圆括号生成一个列表。类似地，一个非列表对用点表示法打印，输入的一个点有效地运行点标记规则从反向得到一个配对。

表达式读取层的一个结果是，可以在不引用的表达式中使用点标记：

> (+ 1 . (2))
3

这是因为(+ 1 . (2))只是(+ 1 2)的另一种法。用这种点表示法编写应用程序表达式实际上并不是一个好主意，它只是定义了Racket语法的一个结果。

通常，在括号序列里只有一个.是被读者允许的，并且只有在序列的最后一个元素。然而，一对.也可以出现在一个括号序列的单个元素周围，只要不是第一个或最后一个元素。这样的一对触发阅读器转换，将元素从.移动到列表的前面。转换可以使一种普遍的中缀表示法成为可能：

> (1 . < . 2)
#t

> '(1 . < . 2)
'(< 1 2)

这两个点约定是非传统的，它与非列表对的点记法基本上没有关系。Racket程序员使用中缀标记——多为非对称二元操作符如<和is-a?。
