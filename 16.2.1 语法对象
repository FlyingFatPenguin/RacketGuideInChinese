16.2.1 语法对象

宏转换器（即源和替换表）的输入和输出被表示为语法对象（syntax object）。语法对象包含符号、列表和常量值（如数字），它们基本上与表达式的引用（quote）表相对应。例如，表达式描述为(+ 1 2)包含符号'+和数字1和2，都在列表中。除了引用的内容之外，语法对象还将源位置和词汇绑定信息与表的每个部分关联起来。在报告语法错误时使用源位置信息（例如），词汇绑定信息允许宏系统维护词法范围。为了适应这种额外的信息，表达式描述为(+ 1 2)不仅是'(+ 1 2)，但'(+ 1 2)的封装成为了语法对象。

要创建文字语法对象，请使用syntax表：

> (syntax (+ 1 2))
#<syntax:1:0 (+ 1 2)>

在同样的方式，'省略了quote，#'省略了syntax：

> #'(+ 1 2)
#<syntax:1:0 (+ 1 2)>

只包含符号的语法对象是标识符语法对象（identifier syntax object）。它提供了一些特定于标识符语法对象的附加操作，包括identifier?操作以检查操作符。最值得注意的是，free-identifier=?确定两个标识符是否引用相同的绑定：

> (identifier? #'car)
#t

> (identifier? #'(+ 1 2))
#f

> (free-identifier=? #'car #'cdr)
#f

> (free-identifier=? #'car #'car)
#t

> (require (only-in racket/base [car also-car]))
> (free-identifier=? #'car #'also-car)
#t

要在语法对象中看到列表、符号、数字等等，请使用syntax->datum：

> (syntax->datum #'(+ 1 2))
'(+ 1 2)

syntax-e函数类似于syntax->datum，但它打开了一个单层的源位置和词汇上下文信息，离开有它们自己的信息作为语法的对象子表：

> (syntax-e #'(+ 1 2))
'(#<syntax:1:0 +> #<syntax:1:0 1> #<syntax:1:0 2>)

syntax-e函数总是放弃语法对象包装器，它包围着子表，子表表示为通过符号、数值，和其它文本值。唯一的一次额外的子表打开时展开一个配对，在这种情况下，配对的cdr可以根据语法构建的对象递归地展开。

当然，syntax->datum的相对是datum->syntax。除了像'(+ 1 2)这样的数据外，,datum->syntax还需要一个现有的语法对象来贡献它的词法上下文，并且可以选择另一个语法对象来贡献它的源位置：

> (datum->syntax #'lex
                 '(+ 1 2)
                 #'srcloc)
#<syntax:1:0 (+ 1 2)>

在上面的例子中，对#'lex的词法上下文是用于新的语法对象，而#'srcloc源位置被使用。

当datum->syntax的第二个（即，“datum”）参数包含语法对象时，这些语法对象将原封不动地保存在结果中。那就是，用syntax-e解构的结果最终产生了给予datum->syntax的这个语法对象。
