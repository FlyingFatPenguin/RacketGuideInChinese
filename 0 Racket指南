本指南适用于新的Racket程序员或部分新的Racket程序员。本指南假定你是有编程经验的。如果您是新学习编程，那么请阅读《如何设计程序》（How to Design Programs）这部分。如果你想特别快地了解Racket语言，从这里开始：《 Quick: An Introduction to Racket with Pictures》这部分。

第2章简要介绍Racket语言。从第3章开始，本指南深入讨论了大部分的Racket语言工具箱，但把更清晰的细节内容留给Racket语言参考手册和其他参考手册介绍。

1 Racket语言欢迎你
  1.1 与Racket语言交互
  1.2 定义和交互
  1.3 创建可执行文件
  1.4 给有LISP/Scheme经验的读者的一个说明

2 Racket语言概要
  2.1 简单值
  2.2 简单的定义与表达式
  2.2.1 定义
  2.2.2 代码缩进
  2.2.3 标识符
  2.2.4 函数调用(应用程序)
  2.2.5 条件表达式if、and、or和cond
  2.2.6 函数反复调用
  2.2.7 匿名函数与lambda
  2.2.8 用define、let和let*实现本地绑定
  2.3 列表、迭代和递归
  2.3.1 预定义列表循环
  2.3.2 从头开始列表迭代
  2.3.3 尾递归
  2.3.4 递归和迭代
  2.4 pair、list和Racket的语法
  2.4.1 用quote引用pair和symbol
  2.4.2 使用引用的缩写（'）
  2.4.3 列表和Racket的语法

3 内置的数据类型
  3.1 布尔值（Boolean）
  3.2 数值（Number）
  3.3 字符（Character）
  3.4 字符串（Unicode Strings）
  3.5 字节（Byte）和字节字符串（Byte String）
  3.6 符号（Symbol）
  3.7 关键词（Keyword）
  3.8 对（Pair）和列表（List）
  3.9 向量（Vector）
  3.10 哈希表（Hash Table）
  3.11 盒（Box）
  3.12 无效值（Void）和未定义值（Undefined）

4 表达式和定义
  4.1 符号
  4.2 标识符和绑定
  4.3 函数调用（过程程序）
    4.3.1 赋值顺序和数量
    4.3.2 关键字参数
    4.3.3 apply函数
  4.4 lambda函数（程序）
    4.4.1 申明剩余（rest）参数
    4.4.2 声明可选（optional）参数
    4.4.3 声明关键字（keyword）参数
    4.4.4 多解函数：case-lambda
  4.5 定义：define
    4.5.1 函数速记法
    4.5.2 特殊功能速记法
    4.5.3 多值和define-values
    4.5.4 内部定义
  4.6 本地绑定
    4.6.1 并行绑定：let
    4.6.2 顺序绑定：let*
    4.6.3 递归绑定：letrec
    4.6.4 命名let
    4.6.5 多值绑定：let-values，let*-values，letrec-values
  4.7 条件分支
    4.7.1 简单分支：if
    4.7.2 组合测试：and和or
    4.7.3 约束测试：cond
  4.8 排序
    4.8.1 前置效应：gegin
    4.8.2 后置效应：begin0
    4.8.3 条件效应：when和unless
  4.9 赋值：set!
    4.9.1 使用的指导原则
    4.9.2 多值赋值：set!-values
  4.10 引用：quote和'
  4.11 类引用：quasiquote和`
  4.12 简单调度：case
  4.13 动态绑定：parameterize

5 自定义的数据类型
  5.1 简单的结构：struct
  5.2 复制和更新
  5.3 结构子类
  5.4 不透明结构与透明结构
  5.5 结构的比较
  5.6 结构的延展
  5.7 预制结构
  5.8 更多的结构选项

6 模块
  6.1 模块基础知识
    6.1.1 组织模块
    6.1.2 库集合
    6.1.3 包和集合
    6.1.4 添加集合
  6.2 模块的语法
    6.2.1 module表
    6.2.2 #lang速记法
    6.2.3 子模块
    6.2.4 主要的和测试的子模块
  6.3 模块的路径
  6.4 输入：require
  6.5 输出：provide
  6.6 赋值和重定义

7 合约
  7.1 合约和边界
    7.1.1合约的违反
    7.1.2 合约与模块的测试
    7.1.3 嵌套合约的测试
  7.2 函数的简单合约
    7.2.1 ->类型
    7.2.2 define/contract和->的使用
    7.2.3 and和any/c
    7.2.4 运转自己的合约
    7.2.5 合约的高阶函数
    7.2.6 ”???“的合约信息
    7.2.7 解析合约的错误消息
  7.3个合约的通用函数
    7.3.1 可选参数
    7.3.2 剩余参数
    7.3.3 关键字参数
    7.3.4 可选关键字参数
    7.3.5 case-lambda合约
    7.3.6 参数和结果的依赖
    7.3.7 检查状态的变化
    7.3.8 多个结果值
    7.3.9 固定但静态未知数量的参数
  7.4合约：一个全面的例子
  7.5 结构的合约
    7.5.1 对特定值的确保
    7.5.2 对所有值的确保
    7.5.3 数据结构的检查特性
  7.6 用#:exists和#:∃抽象合约
  7.7 额外的例子
    7.7.1 客户管理器的组成
    7.7.2 参数（简单）栈
    7.7.3 字典
    7.7.4 队列
  7.8 建立新合约
    7.8.1 合约结构属性
    
